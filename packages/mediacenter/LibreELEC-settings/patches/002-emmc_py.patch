new file mode 100644
index 000000000000..eae333d55208
--- /dev/null
+++ b/resources/lib/modules/emmc.py
@@ -0,0 +1,178 @@
+################################################################################
+#      This file is part of OpenELEC - http://www.openelec.tv
+#      Copyright (C) 2009-2013 Stephan Raue (stephan@openelec.tv)
+#      Copyright (C) 2013 Lutz Fiebach (lufie@openelec.tv)
+#
+#  This program is dual-licensed; you can redistribute it and/or modify
+#  it under the terms of the GNU General Public License as published by
+#  the Free Software Foundation; either version 2 of the License, or
+#  (at your option) any later version.
+#
+#  This Program is distributed in the hope that it will be useful,
+#  but WITHOUT ANY WARRANTY; without even the implied warranty of
+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+#  GNU General Public License for more details.
+#
+#  You should have received a copy of the GNU General Public License
+#  along with OpenELEC; see the file COPYING.  If not, see
+#  <http://www.gnu.org/licenses/>.
+#
+#  Alternatively, you can license this library under a commercial license,
+#  please contact OpenELEC Licensing for more information.
+#
+#  For more information contact:
+#  OpenELEC Licensing  <license@openelec.tv>  http://www.openelec.tv
+################################################################################
+# -*- coding: utf-8 -*-
+
+import log
+import modules
+import oe
+import os
+import subprocess
+import xbmc
+import xbmcgui
+
+
+class emmc(modules.Module):
+
+    ENABLED = False
+    EMMC_INSTALL = "/flash/install2emmc.sh"
+    EMMC_DDBR_BACKUP = "/flash/ddbr-backup.sh"
+    EMMC_DDBR_RESTORE = "/flash/ddbr-restore.sh"
+    EMMC_REBOOT_ENABLE = "/flash/android_enable.sh"
+    EMMC_REBOOT_DISABLE = "/flash/android_disable.sh"
+    menu = {'8': {
+        'name': 32820,
+        'menuLoader': 'load_menu',
+        'listTyp': 'list',
+        'InfoText': 703,
+        }}
+
+    @log.log_function()
+    def __init__(self, oeMain):
+        super().__init__()
+        self.oe = oeMain
+        self.struct = {
+            'emmc': {
+                'order': 1,
+                'name': 32820,
+                'not_supported': [],
+                    'settings': {
+                        'emmc_install': {
+                            'order': 1,
+                            'name': 32821,
+                            'value': '0',
+                            'action': 'install_emmc',
+                            'type': 'button',
+                            'InfoText': 2821,
+                            },
+                        'emmc_backup': {
+                            'order': 2,
+                            'name': 32822,
+                            'value': '0',
+                            'action': 'backup_emmc',
+                            'type': 'button',
+                            'InfoText': 2822,
+                            },
+                        'emmc_restore': {
+                            'order': 3,
+                            'name': 32823,
+                            'value': '0',
+                            'action': 'restore_emmc',
+                            'type': 'button',
+                            'InfoText': 2823,
+                            },
+                        'emmc_reboot_enable': {
+                            'order': 4,
+                            'name': 32824,
+                            'value': '0',
+                            'action': 'reboot_emmc_enable',
+                            'type': 'button',
+                            'InfoText': 2824,
+                            },
+                        'emmc_reboot_disable': {
+                            'order': 5,
+                            'name': 32825,
+                            'value': '0',
+                            'action': 'reboot_emmc_disable',
+                            'type': 'button',
+                            'InfoText': 2825,
+                            },
+                    },
+                },
+            }
+
+    @log.log_function()
+    def load_menu(self, focusItem):
+        oe.winOeMain.build_menu(self.struct)
+
+    @log.log_function()
+    def install_emmc(self, listItem=None):
+        if os.path.exists(self.EMMC_INSTALL):
+            dialog = xbmcgui.Dialog()
+            ret = dialog.yesno('Attention!', 'Install Libreelec to eMMC ?')
+            if ret:
+                self.oe.notify(self.oe._(32363), 'Installation...')
+                message = self.oe.execute(self.EMMC_INSTALL)
+                if message == 'Done! Install Libreelec to eMMC completed.':
+                    dialog = xbmcgui.Dialog()
+                    dialog.notification('Install',
+                                    '%s' % message,
+                                    xbmcgui.NOTIFICATION_INFO, 3000)
+
+    @log.log_function()
+    def backup_emmc(self, listItem=None):
+        if os.path.exists(self.EMMC_DDBR_BACKUP):
+            dialog = xbmcgui.Dialog()
+            ret = dialog.yesno('Attention!', 'Create full backup eMM ?')
+            if ret:
+                self.oe.notify(self.oe._(32363), 'Backup...')
+                message = self.oe.execute(self.EMMC_DDBR_BACKUP, 1).strip()
+                if message == 'Done! Full backup completed.':
+                    dialog = xbmcgui.Dialog()
+                    dialog.notification('Backup',
+                                    '%s' % message,
+                                    xbmcgui.NOTIFICATION_INFO, 3000)
+
+    @log.log_function()
+    def restore_emmc(self, listItem=None):
+        if os.path.exists(self.EMMC_DDBR_RESTORE):
+            dialog = xbmcgui.Dialog()
+            ret = dialog.yesno('Attention!', 'Start restore full backup eMMC ?')
+            if ret:
+                self.oe.notify(self.oe._(32363), 'Restore...')
+                message = self.oe.execute(self.EMMC_DDBR_RESTORE, 1).strip()
+                if message == 'Done! restore backup completed.':
+                   dialog = xbmcgui.Dialog()
+                   dialog.notification('Restore',
+                                    '%s' % message,
+                                    xbmcgui.NOTIFICATION_INFO, 3000)
+
+    @log.log_function()
+    def reboot_emmc_enable(self, listItem=None):
+        if os.path.exists(self.EMMC_REBOOT_ENABLE):
+            dialog = xbmcgui.Dialog()
+            ret = dialog.yesno('Attention!', 'Start enable reboot to Android ?')
+            if ret:
+                self.oe.notify(self.oe._(32363), 'Enable...')
+                message = self.oe.execute(self.EMMC_REBOOT_ENABLE, 1).strip()
+                if message == 'Done! enable reboot android completed.':
+                   dialog = xbmcgui.Dialog()
+                   dialog.notification('Reboot',
+                                    '%s' % message,
+                                    xbmcgui.NOTIFICATION_INFO, 3000)
+
+    @log.log_function()
+    def reboot_emmc_disable(self, listItem=None):
+        if os.path.exists(self.EMMC_REBOOT_DISABLE):
+            dialog = xbmcgui.Dialog()
+            ret = dialog.yesno('Attention!', 'Start disable reboot to Android ?')
+            if ret:
+                self.oe.notify(self.oe._(32363), 'Disable...')
+                message = self.oe.execute(self.EMMC_REBOOT_DISABLE, 1).strip()
+                if message == 'Done! disable reboot android completed.':
+                   dialog = xbmcgui.Dialog()
+                   dialog.notification('Reboot',
+                                    '%s' % message,
+                                    xbmcgui.NOTIFICATION_INFO, 3000)

