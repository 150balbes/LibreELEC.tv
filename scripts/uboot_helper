#!/usr/bin/env python3

# SPDX-License-Identifier: GPL-2.0
# Copyright (C) 2017-present Team LibreELEC (https://libreelec.tv)

import argparse

# When adding new devices to the list please keep them in alphabetical order
# board-name should contain 'dashes' (-) not 'underscores' (_) and shouldn't contain capitals
# you can check the formating using an online tool such as https://codebeautify.org/python-formatter-beautifier

#  'project' : {
#    'device' : {
#      'board-name' : {
#        'dtb' : 'board-name.dtb',
#        'config' : 'board_name_defconfig'
#      },
#    },
#  },

devices = \
{
  'ARM': {
    'ARMv8': {
      'amlg12': {
        'dtb': 'meson-g12a-x96-max.dtb',
        'config': 'u200_defconfig'
      },
      'odroid-n2': {
        'dtb': 'meson-g12b-odroid-n2.dtb',
        'config': 'odroid-n2_defconfig'
      },
      'amlgx': {
        'dtb': 'meson-gxl-s905x-p212.dtb',
        'config': 'p212_defconfig'
      },
      'amlgxbb': {
        'dtb': 'meson-gxbb-wetek-play2.dtb',
        'config': 'odroid-c2_defconfig'
      },
      'odroid-c2': {
        'dtb': 'meson-gxbb-odroidc2.dtb',
        'config': 'odroid-c2_defconfig'
      },
      'rk3328': {
        'dtb': 'rk3328-box.dtb',
        'config': 'rock64-rk3328_defconfig'
      },
      'rk3328-old': {
        'dtb': 'rk3328-box.dtb',
        'config': 'evb-rk3328_defconfig'
      },
      'rk3328-roc-pc': {
        'dtb': 'rk3328-roc-pc.dtb',
        'config': 'rock64-rk3328_defconfig'
      },
      'rk3399-roc-pc': {
        'dtb': 'rk3399-roc-pc-mezzanine.dtb',
        'config': 'roc-pc-mezzanine-rk3399_config'
      },
      'rk3399': {
        'dtb': 'rk3399-nanopc-t4.dtb',
        'config': 'rock-pi-4-rk3399_config'
      },
      'h5': {
        'dtb': 'sun50i-h5-orangepi-pc2.dtb',
        'config': 'orangepi_pc2_defconfig',
        'crust_config': 'orangepi_pc2_defconfig',
      },
      'h6' : {
        'dtb' : 'sun50i-h6-tanix-tx6.dtb',
        'config' : 'tanix_tx6_defconfig',
        'crust_config' : 'tanix_tx6_defconfig'
      },
    },
    'ARMv7': {
      's8xx': {
        'dtb': 'meson8m2-mxiii-plus.dtb',
        'config': 'odroid-xu3_defconfig'
      },
      'rk3188': {
        'dtb' : 'rk3188-ugoos-ut2.dtb',
        'config' : 'rbox-rk3188_defconfig'
       },
      'rk3288': {
        'dtb': 'rk3288-firefly-reload.dtb',
        'config': 'miqi-rk3288_config'
      },
    },
  },
}

class OptionsAction(argparse.Action):

    def __call__(self, parser, namespace, values, option_string=None):
        message = None

        if self.dest == 'project':
            if values is None:
                print(' '.join(project for project in sorted(devices)))
                parser.exit()

            if values not in devices.keys():
                message = "invalid choice: {0!r} (choose from {1})".format(values, ', '.join([repr(project) for project in devices]))

        if self.dest == 'soc':
            project = getattr(namespace, 'project')

            if values is None:
                print(' '.join(soc for soc in sorted(devices[project])))
                parser.exit()

            if values not in devices[project].keys():
                message = "invalid choice: {0!r} (choose from {1})".format(values, ', '.join([repr(soc) for soc in devices[project]]))

        if self.dest == 'board':
            project = getattr(namespace, 'project')
            soc = getattr(namespace, 'soc')

            if values is None:
                print(' '.join(board for board in sorted(devices[project][soc])))
                parser.exit()

            if values not in devices[project][soc].keys():
                message = "invalid choice: {0!r} (choose from {1})".format(values, ', '.join([repr(board) for board in devices[project][soc]]))

        if self.dest == 'value':
            project = getattr(namespace, 'project')
            soc = getattr(namespace, 'soc')
            board = getattr(namespace, 'board')

            if values is None:
                print(' '.join(value for value in sorted(devices[project][soc][board].keys())))
                parser.exit()

            if values not in devices[project][soc][board].keys():
                parser.exit()

        if message is not None:
            raise argparse.ArgumentError(self, message)

        setattr(namespace, self.dest, values)

parser = argparse.ArgumentParser(description='Script to help with u-boot configuration')

parser.add_argument('project', nargs='?', action=OptionsAction)

parser.add_argument('soc', nargs='?', action=OptionsAction)

parser.add_argument('board', nargs='?', action=OptionsAction)

parser.add_argument('value', nargs='?', action=OptionsAction)

options = parser.parse_args()

print(devices[options.project][options.soc][options.board][options.value])

parser.exit()
